{
  "address": "0xCd770265c2a68D789687Da218B0Ae7540bAb44a0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sgProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProxy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwapData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "SwapFailure",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Disperse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReceiveERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SgProxyReceive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDisperse.DisperseParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "disperse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDisperse.DisperseParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "disperseIntrinsic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onReceiveERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sgProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sgProxyReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c097434e703490926f785f50211c222de7693665bcc1e19577463c54243c718",
  "receipt": {
    "to": null,
    "from": "0x612ef87bfcd858687160294b0eFFACA0CBA342E2",
    "contractAddress": "0xCd770265c2a68D789687Da218B0Ae7540bAb44a0",
    "transactionIndex": 0,
    "gasUsed": "902376",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4d449fbc5c46477905b0d50c56ad8bc8dd9e9b2968919daa390d7176db8cd0ce",
    "transactionHash": "0x1c097434e703490926f785f50211c222de7693665bcc1e19577463c54243c718",
    "logs": [],
    "blockNumber": 20192363,
    "cumulativeGasUsed": "902376",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9da9998E93F27562d780eC269A8b65f3299Ee369"
  ],
  "numDeployments": 2,
  "solcInputHash": "6a92ef10e8c41c2f93b3446e73c710fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sgProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"SwapFailure\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Disperse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReceiveERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SgProxyReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDisperse.DisperseParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDisperse.DisperseParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"disperseIntrinsic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onReceiveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sgProxyReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Disperse.sol\":\"Disperse\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Disperse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IDisperse.sol\\\";\\nimport \\\"./libraries/SwapUtils.sol\\\";\\n\\ncontract Disperse is IDisperse {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    address public immutable sgProxy;\\n    mapping(address => mapping(address => uint256)) public balances;\\n\\n    constructor(address _sgProxy) {\\n        sgProxy = _sgProxy;\\n    }\\n\\n    receive() external payable {}\\n\\n    function onReceiveERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (msg.sender != sgProxy) revert InvalidProxy();\\n        if (token == address(0)) revert InvalidToken();\\n\\n        balances[token][to] += amount;\\n\\n        emit OnReceiveERC20(token, to, amount);\\n    }\\n\\n    function sgProxyReceive(\\n        address srcFrom,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external {\\n        if (msg.sender != sgProxy) revert InvalidProxy();\\n\\n        (\\n            address tokenOut,\\n            address swapTo,\\n            bytes memory swapData,\\n            address[] memory recipients,\\n            uint256[] memory amounts\\n        ) = abi.decode(data, (address, address, bytes, address[], uint256[]));\\n\\n        _disperse(token, amount, tokenOut, swapTo, swapData, recipients, amounts, srcFrom);\\n\\n        emit SgProxyReceive(srcFrom, token, amount, data);\\n    }\\n\\n    function withdraw(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (amount > balances[token][msg.sender]) revert InsufficientBalance();\\n        balances[token][msg.sender] -= amount;\\n\\n        IERC20(token).safeTransfer(to, amount);\\n\\n        emit Withdraw(token, to, amount);\\n    }\\n\\n    function disperse(DisperseParams calldata params) external {\\n        IERC20(params.tokenIn).safeTransferFrom(msg.sender, address(this), params.amountIn);\\n\\n        _disperse(\\n            params.tokenIn,\\n            params.amountIn,\\n            params.tokenOut,\\n            params.swapTo,\\n            params.swapData,\\n            params.recipients,\\n            params.amounts,\\n            msg.sender\\n        );\\n    }\\n\\n    function disperseIntrinsic(DisperseParams calldata params) external {\\n        if (params.amountIn > balances[params.tokenIn][msg.sender]) revert InsufficientBalance();\\n        balances[params.tokenIn][msg.sender] -= params.amountIn;\\n\\n        _disperse(\\n            params.tokenIn,\\n            params.amountIn,\\n            params.tokenOut,\\n            params.swapTo,\\n            params.swapData,\\n            params.recipients,\\n            params.amounts,\\n            msg.sender\\n        );\\n    }\\n\\n    function _disperse(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        address swapTo,\\n        bytes memory swapData,\\n        address[] memory recipients,\\n        uint256[] memory amounts,\\n        address refundAddress\\n    ) internal {\\n        uint256 length = recipients.length;\\n        if (length != amounts.length) revert InvalidParams();\\n\\n        if (swapTo != address(0)) {\\n            SwapUtils.swapERC20(tokenIn, amountIn, swapTo, swapData, tokenIn != tokenOut, refundAddress);\\n        }\\n\\n        if (tokenOut == address(0)) {\\n            for (uint256 i; i < length; ) {\\n                uint256 amount = amounts[i];\\n                if (amount > 0) {\\n                    payable(recipients[i]).sendValue(amount);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            for (uint256 i; i < length; ) {\\n                uint256 amount = amounts[i];\\n                if (amount > 0) {\\n                    IERC20(tokenOut).safeTransfer(recipients[i], amount);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            uint256 balanceTokenOut = IERC20(tokenOut).balanceOf(address(this));\\n            if (balanceTokenOut > 0) {\\n                IERC20(tokenOut).safeTransfer(refundAddress, balanceTokenOut);\\n            }\\n        }\\n\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            payable(refundAddress).sendValue(balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x074f6a65c91267687d95828a967fd1f293c79d96b7762bf8705cffee1dc6a54f\",\"license\":\"MIT\"},\"contracts/interfaces/IDisperse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStargateProxyReceiver.sol\\\";\\n\\ninterface IDisperse is IStargateProxyReceiver {\\n    error InvalidToken();\\n    error InsufficientBalance();\\n    error InvalidParams();\\n    error InvalidSwapData();\\n\\n    event Disperse(address indexed token, address[] recipients, uint256[] amounts);\\n    event Withdraw(address indexed token, address indexed to, uint256 amount);\\n\\n    struct DisperseParams {\\n        uint256 amountIn;\\n        address tokenIn;\\n        address tokenOut;\\n        address swapTo;\\n        bytes swapData;\\n        address[] recipients;\\n        uint256[] amounts;\\n        address refundAddress;\\n    }\\n\\n    function withdraw(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function disperse(DisperseParams calldata params) external;\\n\\n    function disperseIntrinsic(DisperseParams calldata params) external;\\n}\\n\",\"keccak256\":\"0x210a8da2926f48a2bc0a78101ffa7aee6e474dc9b4f1655c5f2c7b0cfb08766a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Receiver {\\n    event OnReceiveERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    function onReceiveERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe92c2cc9a28fd8adc3c3a01645f22e1529dd6aca055a1e7a362c7492620f5b49\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateProxyReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Receiver.sol\\\";\\n\\ninterface IStargateProxyReceiver is IERC20Receiver {\\n    error InvalidProxy();\\n\\n    event SgProxyReceive(address indexed srcFrom, address indexed token, uint256 amount, bytes data);\\n\\n    function sgProxy() external view returns (address);\\n\\n    function sgProxyReceive(\\n        address srcFrom,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x716f67acc0b1e542d4da34f52d5e327725daceb4abd9c941c3d9d87e04c55e4e\",\"license\":\"MIT\"},\"contracts/libraries/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SwapUtils {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    error SwapFailure(bytes reason);\\n\\n    function swapNative(\\n        uint256 amount,\\n        address to,\\n        bytes memory data,\\n        bool sweep,\\n        address refundAddress\\n    ) internal {\\n        (bool ok, bytes memory reason) = to.call{value: amount}(data);\\n        if (!ok) revert SwapFailure(reason);\\n\\n        if (sweep) {\\n            uint256 balance = address(this).balance;\\n            if (balance > 0) {\\n                payable(refundAddress).sendValue(balance);\\n            }\\n        }\\n    }\\n\\n    function swapERC20(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        bytes memory data,\\n        bool sweep,\\n        address refundAddress\\n    ) internal {\\n        IERC20(token).approve(to, amount);\\n        (bool ok, bytes memory reason) = to.call(data);\\n        if (!ok) revert SwapFailure(reason);\\n        IERC20(token).approve(to, 0);\\n\\n        if (sweep) {\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (balance > 0) {\\n                IERC20(token).safeTransfer(refundAddress, balance);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58e1e22200db00cedbf08c94941e28882536069b7ad073f9a62d8fea89333a1c\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c908162e97a1e14610557575080631efc020014610513578063248ff46d1461044157806344ab9e631461026d5780638f41aa6014610162578063c23f001f146101165763d9caed120361001157346101125761008436610667565b9360018060a01b0380931693848752866020528187203388526020528187205486116101045750916020917f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9385885287845280882033895284528088206100ed8882546107e3565b90556100fa878388610806565b519586521693a380f35b9051631e9acf1760e31b8152fd5b8280fd5b50503461015e578060031936011261015e5780602092610134610627565b61013c61063d565b6001600160a01b03918216835282865283832091168252845220549051908152f35b5080fd5b5091903461015e57610173366105ef565b90602082016001600160a01b0361018982610a5a565b16908335918351906323b872dd60e01b60208301523360248301523060448301528360648301526064825260a0820182811067ffffffffffffffff82111761025a576101f0610247946101eb610235958998956101f8956102579c9b52610861565b610a5a565b948601610a5a565b61020460608701610a5a565b916102516102156080890189610a6e565b96909861023f61022860a0830183610aa1565b98909260c0810190610aa1565b9b909936916106f0565b96369161073f565b9533983691610795565b95610b01565b80f35b634e487b7160e01b885260418952602488fd5b503461011257608036600319011261011257610287610627565b9161029061063d565b906044356064359067ffffffffffffffff9485831161043d573660238401121561043d578281013595808711610439576024840195878501966024880197368911610435576001600160a01b03947f00000000000000000000000000000000000000000000000000000000000000008616330361042757508660a09103126104235761031b81610653565b9061032860448801610653565b98606488013585811161041b5788018160438201121561041b5781816044602461035594013591016106f0565b94608489013581811161041f5789018260438201121561041f57828160446024610382940135910161073f565b9860a481013591821161041f57018160438201121561041b577f306e52e696725536abdc0fb4d86f0b2106da283c10c503b14d71eb0d31f0d3b69a60609988978f93968f978a6103df6103ea988360446024859601359101610795565b951691168c8a610b01565b81885198899788528060208901528701528686013783880185018a905216961694601f01601f19168101030190a380f35b8d80fd5b8e80fd5b8a80fd5b8851632e7973df60e21b8152fd5b8b80fd5b8880fd5b8780fd5b5090346101125761045136610667565b90936001600160a01b039391927f0000000000000000000000000000000000000000000000000000000000000000851633036105045784169384156104f557848752866020528287209516948587526020528186208054918483018093116104e2575055519081527f0ed72cefdd96310ec050a1853b2182f0fcad7eb150d77b40cd9ec741adffd75190602090a380f35b634e487b7160e01b885260119052602487fd5b50905163c1ab6dc160e01b8152fd5b509051632e7973df60e21b8152fd5b50503461015e578160031936011261015e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8483853461011257610568366105ef565b803594909260208401916001600160a01b0391908261058685610a5a565b168752866020528487203388526020528487205488116105e357505061025794956101f86101f084610235946105be61024797610a5a565b168a5289602052868a20338b52602052868a206105dc8582546107e3565b9055610a5a565b631e9acf1760e31b8152fd5b60031990602081830112610622576004359167ffffffffffffffff83116106225782610100920301126106225760040190565b600080fd5b600435906001600160a01b038216820361062257565b602435906001600160a01b038216820361062257565b35906001600160a01b038216820361062257565b6060906003190112610622576001600160a01b0390600435828116810361062257916024359081168103610622579060443590565b90601f8019910116810190811067ffffffffffffffff8211176106be57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116106be57601f01601f191660200190565b9291926106fc826106d4565b9161070a604051938461069c565b829481845281830111610622578281602093846000960137010152565b67ffffffffffffffff81116106be5760051b60200190565b929161074a82610727565b91610758604051938461069c565b829481845260208094019160051b810192831161062257905b82821061077e5750505050565b83809161078a84610653565b815201910190610771565b92916107a082610727565b916107ae604051938461069c565b829481845260208094019160051b810192831161062257905b8282106107d45750505050565b813581529083019083016107c7565b919082039182116107f057565b634e487b7160e01b600052601160045260246000fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526108479161084260648361069c565b610861565b565b90816020910312610622575180151581036106225790565b60408051908101916001600160a01b031667ffffffffffffffff8311828410176106be576108d1926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16108cb61094d565b9161097d565b805190816108de57505050565b82806108ee938301019101610849565b156108f65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b3d15610978573d9061095e826106d4565b9161096c604051938461069c565b82523d6000602084013e565b606090565b919290156109df5750815115610991575090565b3b1561099a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156109f25750805190602001fd5b60405162461bcd60e51b815260206004820152908190610a16906024830190610a1a565b0390fd5b919082519283825260005b848110610a46575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610a25565b356001600160a01b03811681036106225790565b903590601e1981360301821215610622570180359067ffffffffffffffff82116106225760200191813603831361062257565b903590601e1981360301821215610622570180359067ffffffffffffffff821161062257602001918160051b3603831361062257565b8051821015610aeb5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b94939190959284519584518703610e30576001600160a01b039788948386169283610c68575b5050505050168015600014610b93575060005b838110610b5c57505050505b479081610b5257505050565b6108479216610e42565b80610b6960019284610ad7565b5180610b77575b5001610b3a565b610b8d9087610b868488610ad7565b5116610e42565b38610b70565b92919060005b838110610c3057505050506040516370a0823160e01b8152306004820152602081602481855afa908115610c2457600091610bf0575b508381610bdf575b505050610b46565b610be892610806565b388083610bd7565b906020823d8211610c1c575b81610c096020938361069c565b81010312610c1957505138610bcf565b80fd5b3d9150610bfc565b6040513d6000823e3d90fd5b80610c3d60019284610ad7565b5180610c4b575b5001610b99565b610c629088610c5a8488610ad7565b511688610806565b38610c44565b6040805163095ea7b360e01b8082526001600160a01b038816600483015260248201959095529697919091169590946020946000949390929091908681604481898d5af18015610e2657918693918493610e09575b50828883519301915af1610ccf61094d565b9015610de7575084519182526004820152816024820152828160448185895af18015610ddd57908a969594939291610db0575b508585168403610d13575b80610b27565b82516370a0823160e01b815230600482015294955092939192908083602481885afa938415610da55750908995949392918193610d6c575b5050508881610d5b575b81610d0d565b610d6492610806565b388088610d55565b829495965080929193503d8311610d9e575b610d88818361069c565b81010312610c1957509086929151388080610d4b565b503d610d7e565b51913d9150823e3d90fd5b610dcf90833d8511610dd6575b610dc7818361069c565b810190610849565b5038610d02565b503d610dbd565b84513d84823e3d90fd5b84610a168751928392630c369d2560e01b845260048401526024830190610a1a565b610e1f90893d8b11610dd657610dc7818361069c565b5038610cbd565b88513d88823e3d90fd5b604051635435b28960e11b8152600490fd5b814710610ed8576000918291829182916001600160a01b03165af1610e6561094d565b5015610e6d57565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea26469706673582212204a45f06af09fccec6c6efc0de4114082d184909b30d0cb003a163a4e394e5e8a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1493,
        "contract": "contracts/Disperse.sol:Disperse",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}