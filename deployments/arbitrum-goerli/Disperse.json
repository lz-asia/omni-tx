{
  "address": "0x48F5579192550290c4Fe832F9FaB3109200ce073",
  "abi": [
    {
      "inputs": [],
      "name": "Exploited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDisperse.DisperseParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "disperse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDisperse.DisperseParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "disperseIntrinsic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onReceiveERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x59391068f39b43d1fa764b32e1bb9faa3c9d1a6b04066beaca31ce15fb91db70",
  "receipt": {
    "to": null,
    "from": "0x612ef87bfcd858687160294b0eFFACA0CBA342E2",
    "contractAddress": "0x48F5579192550290c4Fe832F9FaB3109200ce073",
    "transactionIndex": 2,
    "gasUsed": "5039184",
    "logsBloom": "0x
    "blockHash": "0x0c062da24682981ccc415bd691f5429db8490df6660b7c7e0aa77caab56f2856",
    "transactionHash": "0x59391068f39b43d1fa764b32e1bb9faa3c9d1a6b04066beaca31ce15fb91db70",
    "logs": [],
    "blockNumber": 12485699,
    "cumulativeGasUsed": "5769743",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "922311866daec46e5264cae60d6c8bf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Exploited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDisperse.DisperseParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDisperse.DisperseParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"disperseIntrinsic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onReceiveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Disperse.sol\":\"Disperse\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Disperse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IDisperse.sol\\\";\\n\\ncontract Disperse is IDisperse {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    mapping(address => mapping(address => uint256)) public balances;\\n\\n    receive() external payable {}\\n\\n    function onReceiveERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (token == address(0)) revert InvalidToken();\\n\\n        balances[token][to] += amount;\\n    }\\n\\n    function _sum(uint256[] calldata amounts) internal pure returns (uint256 amount) {\\n        for (uint256 i; i < amounts.length; ) {\\n            amount += amounts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function withdraw(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (amount > balances[token][msg.sender]) revert InsufficientBalance();\\n        balances[token][msg.sender] -= amount;\\n\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    function disperse(DisperseParams calldata params) external {\\n        uint256 amount = _sum(params.amounts);\\n        IERC20(params.tokenIn).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _disperse(params);\\n    }\\n\\n    function disperseIntrinsic(DisperseParams calldata params) external {\\n        uint256 amount = _sum(params.amounts);\\n        if (amount > balances[params.tokenIn][msg.sender]) revert InsufficientBalance();\\n        balances[params.tokenIn][msg.sender] -= amount;\\n\\n        uint256 balance = IERC20(params.tokenIn).balanceOf(address(this));\\n        _disperse(params);\\n        if (balance - IERC20(params.tokenIn).balanceOf(address(this)) > amount) revert Exploited();\\n    }\\n\\n    function _disperse(DisperseParams calldata params) internal {\\n        uint256 length = params.recipients.length;\\n        if (length != params.amounts.length) revert InvalidParams();\\n\\n        uint256 balanceTokenOut;\\n        if (params.tokenOut != address(0)) {\\n            balanceTokenOut = IERC20(params.tokenOut).balanceOf(address(this));\\n        }\\n        if (params.swapData.length > 0) {\\n            if (IERC20(params.tokenIn).allowance(address(this), params.swapTo) == 0) {\\n                IERC20(params.tokenIn).approve(params.swapTo, type(uint256).max);\\n            }\\n            params.swapTo.call(params.swapData);\\n        }\\n\\n        if (params.tokenOut == address(0)) {\\n            for (uint256 i; i < length; ) {\\n                uint256 amount = params.amounts[i];\\n                if (amount > 0) {\\n                    payable(params.recipients[i]).sendValue(amount);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            for (uint256 i; i < length; ) {\\n                uint256 amount = params.amounts[i];\\n                if (amount > 0) {\\n                    IERC20(params.tokenOut).safeTransfer(params.recipients[i], amount);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            uint256 balance = IERC20(params.tokenOut).balanceOf(address(this));\\n            if (balance > balanceTokenOut) {\\n                IERC20(params.tokenOut).safeTransfer(params.refundAddress, balance - balanceTokenOut);\\n            }\\n        }\\n\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            payable(params.refundAddress).sendValue(balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8ec945dadee24a4391a3267dc4825a23dcebcc64466b6c56005071ffa18c681\",\"license\":\"MIT\"},\"contracts/interfaces/IDisperse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStargateVault.sol\\\";\\n\\ninterface IDisperse is IStargateVault {\\n    error InvalidToken();\\n    error InsufficientBalance();\\n    error InvalidParams();\\n    error Exploited();\\n\\n    struct DisperseParams {\\n        address tokenIn;\\n        address tokenOut;\\n        address swapTo;\\n        bytes swapData;\\n        address[] recipients;\\n        uint256[] amounts;\\n        address refundAddress;\\n    }\\n\\n    function withdraw(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function disperse(DisperseParams calldata params) external;\\n\\n    function disperseIntrinsic(DisperseParams calldata params) external;\\n}\\n\",\"keccak256\":\"0x31001d8218cb1acbcd0ae4dab063eb73429ec184a53dfb71b7ee3b1a0ac4c964\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStargateVault {\\n    function onReceiveERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7a17ee4817020788870682284807b0413f007e868b0b708238affc940375a2af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610cfb908161001c8239f35b600080fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600090813560e01c806302c3f34914610226578063248ff46d146101ce578063c23f001f14610176578063c778aec2146100d85763d9caed12146100645750610011565b346100d457610072366103f5565b92909160018060a01b031690818552846020528085203386526020528085205484116100c557849550816100c295528560205280862033875260205285206100bb84825461044d565b9055610492565b80f35b51631e9acf1760e31b81528590fd5b5080fd5b50346100d4576100e7366103be565b906100fe6100f860a08401846106fc565b9061076c565b906001600160a01b0361011084610732565b16908051926323b872dd60e01b602085015233602485015230604485015260648401526064835260a083019083821067ffffffffffffffff83111761016357526100c2929161015e916104fc565b6107d8565b634e487b7160e01b865260418752602486fd5b5082346101ca57816003193601126101ca576001600160a01b039035818116908190036101c6576024359182168092036101c6579282916020948252818552828220908252845220549051908152f35b8380fd5b8280fd5b50346100d4576101dd366103f5565b92916001600160a01b039081168015610216578561021195969750528560205282862091168552602052832091825461042a565b905580f35b835163c1ab6dc160e01b81528790fd5b508290346101ca57610237366103be565b6102476100f860a08301836106fc565b906001600160a01b03908161025b82610732565b16865260209086825284872033885282528487205484116103ae578261028082610732565b168752868252848720338852825284872061029c85825461044d565b9055826102a882610732565b169285519183836024816370a0823160e01b98898252308d8301525afa9283156103a457908492918a9461036c575b50806102e56102ea926107d8565b610732565b169360248751809681938252308b8301525afa91821561036257879261032c575b50610316925061044d565b1161031f578280f35b5163065ba77960e01b8152fd5b90915082813d831161035b575b610343818361045a565b81010312610357576103169151908761030b565b8580fd5b503d610339565b85513d89823e3d90fd5b8381949295503d831161039d575b610384818361045a565b81010312610399576102ea84925193906102d7565b8880fd5b503d61037a565b87513d8b823e3d90fd5b8451631e9acf1760e31b81528690fd5b600319906020818301126103f0576004359167ffffffffffffffff83116103f0578260e0920301126103f05760040190565b600080fd5b60609060031901126103f0576001600160a01b039060043582811681036103f0579160243590811681036103f0579060443590565b9190820180921161043757565b634e487b7160e01b600052601160045260246000fd5b9190820391821161043757565b90601f8019910116810190811067ffffffffffffffff82111761047c57604052565b634e487b7160e01b600052604160045260246000fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff83118284101761047c576104e2926040526104fc565b565b908160209103126103f0575180151581036103f05790565b60408051908101916001600160a01b031667ffffffffffffffff83118284101761047c5761056c926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16105666105e8565b91610628565b8051908161057957505050565b82806105899383010191016104e4565b156105915750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b3d15610623573d9067ffffffffffffffff821161047c5760405191610617601f8201601f19166020018461045a565b82523d6000602084013e565b606090565b9192901561068a575081511561063c575090565b3b156106455790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561069d5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106106e3575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506106c0565b903590601e19813603018212156103f0570180359067ffffffffffffffff82116103f057602001918160051b360383136103f057565b356001600160a01b03811681036103f05790565b91908110156107565760051b0190565b634e487b7160e01b600052603260045260246000fd5b91906000926000915b80831061078157505050565b90919361079c600191610795878587610746565b359061042a565b94019190610775565b903590601e19813603018212156103f0570180359067ffffffffffffffff82116103f0576020019181360383136103f057565b608081016107e681836106fc565b905060a08301916107f783856106fc565b90508203610bd8576001600160a01b0392602060008682018661081982610732565b16610b5e575b6060880161082d818a6107a5565b90506109f0575b508661083f82610732565b166108c25750505060005b83811061087757505050505b47908161086257505050565b61087160c06104e29401610732565b16610bea565b808061088f600193610889868b6106fc565b90610746565b35878987836108a4575b50505050500161084a565b6108b8946108896102e592610871946106fc565b8038878987610899565b9260009897969592989491945b8381106109985750505050602486846108e784610732565b16604051928380926370a0823160e01b82523060048301525afa96871561098c5760009761095b575b50509482939495828211610928575b50505050610856565b6109529361093861094c92610732565b169261094660c08801610732565b9261044d565b91610492565b8038808061091f565b81813d8311610985575b61096f818361045a565b81010312610981575195508238610910565b8680fd5b503d610965565b6040513d6000823e3d90fd5b80856109aa600193610889868d6106fc565b358a868b85846109c1575b505050505050016108cf565b6108896109df936102e5936109d86109e599610732565b16956106fc565b90610492565b85388a868b856109b5565b876109fa8a610732565b1690604091828b0190868b6044610a1085610732565b87519485938492636eb1769f60e11b84523060048501521660248301525afa908115610b1a57908c94939291600091610b25575b5015610a85575b916000610a64819593610a5e8396610732565b946107a5565b8093519384928337810182815203925af150610a7e6105e8565b5038610834565b909192610a928b91610732565b16868b6044610aa085610732565b60008851958694859363095ea7b360e01b8552166004840152811960248401525af18015610b1a57610a646000959294610a5e8f9588978895610aed575b50949650509395505050610a4b565b610b0c908d803d10610b13575b610b04818361045a565b8101906104e4565b5038610ade565b503d610afa565b84513d6000823e3d90fd5b91929394508782813d8311610b57575b610b3f818361045a565b81010312610b545750908b9392915138610a44565b80fd5b503d610b35565b9060248388610b6c85610732565b16604051928380926370a0823160e01b82523060048301525afa918215610bcc578092610b9c575b50509061081f565b9091508382813d8311610bc5575b610bb4818361045a565b81010312610b545750513880610b94565b503d610baa565b604051903d90823e3d90fd5b604051635435b28960e11b8152600490fd5b814710610c80576000918291829182916001600160a01b03165af1610c0d6105e8565b5015610c1557565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea2646970667358221220909820c06e9afdb6edafa4385d57f99f02f8a54084aa905e9666c6f82f1342e764736f6c63430008110033",
  "deployedBytecode": "0x60406080815260049081361015610020575b5050361561001e57600080fd5b005b600090813560e01c806302c3f34914610226578063248ff46d146101ce578063c23f001f14610176578063c778aec2146100d85763d9caed12146100645750610011565b346100d457610072366103f5565b92909160018060a01b031690818552846020528085203386526020528085205484116100c557849550816100c295528560205280862033875260205285206100bb84825461044d565b9055610492565b80f35b51631e9acf1760e31b81528590fd5b5080fd5b50346100d4576100e7366103be565b906100fe6100f860a08401846106fc565b9061076c565b906001600160a01b0361011084610732565b16908051926323b872dd60e01b602085015233602485015230604485015260648401526064835260a083019083821067ffffffffffffffff83111761016357526100c2929161015e916104fc565b6107d8565b634e487b7160e01b865260418752602486fd5b5082346101ca57816003193601126101ca576001600160a01b039035818116908190036101c6576024359182168092036101c6579282916020948252818552828220908252845220549051908152f35b8380fd5b8280fd5b50346100d4576101dd366103f5565b92916001600160a01b039081168015610216578561021195969750528560205282862091168552602052832091825461042a565b905580f35b835163c1ab6dc160e01b81528790fd5b508290346101ca57610237366103be565b6102476100f860a08301836106fc565b906001600160a01b03908161025b82610732565b16865260209086825284872033885282528487205484116103ae578261028082610732565b168752868252848720338852825284872061029c85825461044d565b9055826102a882610732565b169285519183836024816370a0823160e01b98898252308d8301525afa9283156103a457908492918a9461036c575b50806102e56102ea926107d8565b610732565b169360248751809681938252308b8301525afa91821561036257879261032c575b50610316925061044d565b1161031f578280f35b5163065ba77960e01b8152fd5b90915082813d831161035b575b610343818361045a565b81010312610357576103169151908761030b565b8580fd5b503d610339565b85513d89823e3d90fd5b8381949295503d831161039d575b610384818361045a565b81010312610399576102ea84925193906102d7565b8880fd5b503d61037a565b87513d8b823e3d90fd5b8451631e9acf1760e31b81528690fd5b600319906020818301126103f0576004359167ffffffffffffffff83116103f0578260e0920301126103f05760040190565b600080fd5b60609060031901126103f0576001600160a01b039060043582811681036103f0579160243590811681036103f0579060443590565b9190820180921161043757565b634e487b7160e01b600052601160045260246000fd5b9190820391821161043757565b90601f8019910116810190811067ffffffffffffffff82111761047c57604052565b634e487b7160e01b600052604160045260246000fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff83118284101761047c576104e2926040526104fc565b565b908160209103126103f0575180151581036103f05790565b60408051908101916001600160a01b031667ffffffffffffffff83118284101761047c5761056c926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16105666105e8565b91610628565b8051908161057957505050565b82806105899383010191016104e4565b156105915750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b3d15610623573d9067ffffffffffffffff821161047c5760405191610617601f8201601f19166020018461045a565b82523d6000602084013e565b606090565b9192901561068a575081511561063c575090565b3b156106455790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561069d5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106106e3575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506106c0565b903590601e19813603018212156103f0570180359067ffffffffffffffff82116103f057602001918160051b360383136103f057565b356001600160a01b03811681036103f05790565b91908110156107565760051b0190565b634e487b7160e01b600052603260045260246000fd5b91906000926000915b80831061078157505050565b90919361079c600191610795878587610746565b359061042a565b94019190610775565b903590601e19813603018212156103f0570180359067ffffffffffffffff82116103f0576020019181360383136103f057565b608081016107e681836106fc565b905060a08301916107f783856106fc565b90508203610bd8576001600160a01b0392602060008682018661081982610732565b16610b5e575b6060880161082d818a6107a5565b90506109f0575b508661083f82610732565b166108c25750505060005b83811061087757505050505b47908161086257505050565b61087160c06104e29401610732565b16610bea565b808061088f600193610889868b6106fc565b90610746565b35878987836108a4575b50505050500161084a565b6108b8946108896102e592610871946106fc565b8038878987610899565b9260009897969592989491945b8381106109985750505050602486846108e784610732565b16604051928380926370a0823160e01b82523060048301525afa96871561098c5760009761095b575b50509482939495828211610928575b50505050610856565b6109529361093861094c92610732565b169261094660c08801610732565b9261044d565b91610492565b8038808061091f565b81813d8311610985575b61096f818361045a565b81010312610981575195508238610910565b8680fd5b503d610965565b6040513d6000823e3d90fd5b80856109aa600193610889868d6106fc565b358a868b85846109c1575b505050505050016108cf565b6108896109df936102e5936109d86109e599610732565b16956106fc565b90610492565b85388a868b856109b5565b876109fa8a610732565b1690604091828b0190868b6044610a1085610732565b87519485938492636eb1769f60e11b84523060048501521660248301525afa908115610b1a57908c94939291600091610b25575b5015610a85575b916000610a64819593610a5e8396610732565b946107a5565b8093519384928337810182815203925af150610a7e6105e8565b5038610834565b909192610a928b91610732565b16868b6044610aa085610732565b60008851958694859363095ea7b360e01b8552166004840152811960248401525af18015610b1a57610a646000959294610a5e8f9588978895610aed575b50949650509395505050610a4b565b610b0c908d803d10610b13575b610b04818361045a565b8101906104e4565b5038610ade565b503d610afa565b84513d6000823e3d90fd5b91929394508782813d8311610b57575b610b3f818361045a565b81010312610b545750908b9392915138610a44565b80fd5b503d610b35565b9060248388610b6c85610732565b16604051928380926370a0823160e01b82523060048301525afa918215610bcc578092610b9c575b50509061081f565b9091508382813d8311610bc5575b610bb4818361045a565b81010312610b545750513880610b94565b503d610baa565b604051903d90823e3d90fd5b604051635435b28960e11b8152600490fd5b814710610c80576000918291829182916001600160a01b03165af1610c0d6105e8565b5015610c1557565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea2646970667358221220909820c06e9afdb6edafa4385d57f99f02f8a54084aa905e9666c6f82f1342e764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1490,
        "contract": "contracts/Disperse.sol:Disperse",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}