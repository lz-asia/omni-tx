{
  "address": "0x6F65E5628D29133Ee6834D1Bfa9a2a3062DA3553",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "DstChainNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStoredMessage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "paramsHash",
          "type": "bytes32"
        }
      ],
      "name": "HandleMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "paramsHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "SGReceive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        }
      ],
      "name": "UpdateDstAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UpdateToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address[]",
          "name": "dstRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "dstAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "paramsHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "srcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "handleMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "srcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "srcFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sgReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "dstRecipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "dstAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOmniDisperse.SwapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        }
      ],
      "name": "updateDstAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4960c0bd4fb278f98b61873917c88e6ee06ff3f7f83052def74cf5b84541dbf",
  "receipt": {
    "to": null,
    "from": "0x612ef87bfcd858687160294b0eFFACA0CBA342E2",
    "contractAddress": "0x6F65E5628D29133Ee6834D1Bfa9a2a3062DA3553",
    "transactionIndex": 0,
    "gasUsed": "1575553",
    "logsBloom": "0x
    "blockHash": "0x31f4837eeaf020bf5ad7a81c625e0ca8fdd3616200c3704e9408722b9bb59f6a",
    "transactionHash": "0xb4960c0bd4fb278f98b61873917c88e6ee06ff3f7f83052def74cf5b84541dbf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 78020887,
        "transactionHash": "0xb4960c0bd4fb278f98b61873917c88e6ee06ff3f7f83052def74cf5b84541dbf",
        "address": "0x6F65E5628D29133Ee6834D1Bfa9a2a3062DA3553",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000612ef87bfcd858687160294b0effaca0cba342e2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x31f4837eeaf020bf5ad7a81c625e0ca8fdd3616200c3704e9408722b9bb59f6a"
      }
    ],
    "blockNumber": 78020887,
    "cumulativeGasUsed": "1575553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB0D502E938ed5f4df2E681fE6E419ff29631d62b"
  ],
  "numDeployments": 1,
  "solcInputHash": "921bc3c36585b9d910b2345d3aa079ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"DstChainNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStoredMessage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"name\":\"HandleMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"SGReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"}],\"name\":\"UpdateDstAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdateToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"dstRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"handleMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"dstRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"internalType\":\"struct IOmniDisperse.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"}],\"name\":\"updateDstAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OmniDisperse.sol\":\"OmniDisperse\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/OmniDisperse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IStargateReceiver.sol\\\";\\nimport \\\"./interfaces/IStargateRouter.sol\\\";\\nimport \\\"./interfaces/IStargateFactory.sol\\\";\\nimport \\\"./interfaces/IStargatePool.sol\\\";\\nimport \\\"./interfaces/IOmniDisperse.sol\\\";\\nimport \\\"./libraries/ExcessivelySafeCall.sol\\\";\\n\\ncontract OmniDisperse is Ownable, IStargateReceiver, IOmniDisperse {\\n    using SafeERC20 for IERC20;\\n    using ExcessivelySafeCall for address;\\n\\n    address public immutable router;\\n    address public immutable factory;\\n    mapping(uint16 => address) public dstAddress;\\n    mapping(uint16 => mapping(address => mapping(address => mapping(uint256 => FailedMessage)))) public failedMessages; // srcChainId -> srcAddress -> srcFrom -> nonce -> FailedMessage\\n\\n    constructor(address _router) {\\n        router = _router;\\n        factory = IStargateRouter(_router).factory();\\n    }\\n\\n    function estimateFee(\\n        uint16 dstChainId,\\n        address[] memory dstRecipients,\\n        uint256[] memory dstAmounts,\\n        uint256 gas,\\n        address from\\n    ) external view override returns (uint256) {\\n        address dst = dstAddress[dstChainId];\\n        if (dst == address(0)) revert DstChainNotFound(dstChainId);\\n\\n        (uint256 fee, ) = IStargateRouter(router).quoteLayerZeroFee(\\n            dstChainId,\\n            1, /*TYPE_SWAP_REMOTE*/\\n            abi.encodePacked(dst),\\n            abi.encodePacked(from, abi.encode(dstRecipients, dstAmounts)),\\n            IStargateRouter.lzTxObj(gas, 0, \\\"0x\\\")\\n        );\\n        return fee;\\n    }\\n\\n    function updateDstAddress(uint16 dstChainId, address _dstAddress) external override onlyOwner {\\n        dstAddress[dstChainId] = _dstAddress;\\n        emit UpdateDstAddress(dstChainId, _dstAddress);\\n    }\\n\\n    function swap(SwapParams memory params) external payable override {\\n        _swap(params, payable(msg.sender), msg.value);\\n    }\\n\\n    function _swap(\\n        SwapParams memory params,\\n        address payable from,\\n        uint256 fee\\n    ) internal {\\n        address dst = dstAddress[params.dstChainId];\\n        if (dst == address(0)) revert DstChainNotFound(params.dstChainId);\\n\\n        address pool = IStargateFactory(factory).getPool(params.poolId);\\n        if (pool == address(0)) revert PoolNotFound(params.poolId);\\n\\n        address token = IStargatePool(pool).token();\\n\\n        uint256 dstMinAmount;\\n        for (uint256 i; i < params.dstAmounts.length; ) {\\n            dstMinAmount += params.dstAmounts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        IERC20(token).safeTransferFrom(from, address(this), params.amount);\\n        IERC20(token).approve(router, params.amount);\\n        IStargateRouter(router).swap{value: fee}(\\n            params.dstChainId,\\n            params.poolId,\\n            params.dstPoolId,\\n            from,\\n            params.amount,\\n            dstMinAmount,\\n            IStargateRouter.lzTxObj(params.gas, 0, \\\"0x\\\"),\\n            abi.encodePacked(dst),\\n            abi.encodePacked(from, abi.encode(params.dstRecipients, params.dstAmounts))\\n        );\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // RECEIVER FUNCTIONS\\n    function sgReceive(\\n        uint16 srcChainId,\\n        bytes calldata srcAddress,\\n        uint256 nonce,\\n        address token,\\n        uint256 amountLD,\\n        bytes calldata payload\\n    ) external override {\\n        if (msg.sender != router) revert Forbidden();\\n\\n        address _srcAddress = address(bytes20(srcAddress[0:20]));\\n        address srcFrom = address(bytes20(payload[0:20]));\\n        bytes memory params = payload[20:];\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(\\n                this.handleMessage.selector,\\n                srcChainId,\\n                _srcAddress,\\n                srcFrom,\\n                token,\\n                amountLD,\\n                params\\n            )\\n        );\\n\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            failedMessages[srcChainId][_srcAddress][srcFrom][nonce] = FailedMessage(token, amountLD, keccak256(params));\\n            emit MessageFailed(srcChainId, _srcAddress, srcFrom, nonce, token, amountLD, params, reason);\\n        }\\n\\n        emit SGReceive(srcChainId, srcAddress, nonce, token, amountLD, payload);\\n    }\\n\\n    function handleMessage(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        address srcFrom,\\n        address token,\\n        uint256 amountLD,\\n        bytes memory params\\n    ) public {\\n        if (msg.sender != address(this)) revert Forbidden();\\n\\n        _handleMessage(srcChainId, srcAddress, srcFrom, token, amountLD, params);\\n    }\\n\\n    function _handleMessage(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        address srcFrom,\\n        address token,\\n        uint256 amountLD,\\n        bytes memory params\\n    ) internal {\\n        (address[] memory recipients, uint256[] memory amounts) = abi.decode(params, (address[], uint256[]));\\n\\n        uint256 amountTotal;\\n        for (uint256 i; i < recipients.length; ) {\\n            uint256 amount = amounts[i];\\n            IERC20(token).safeTransfer(recipients[i], amount);\\n\\n            amountTotal += amount;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (amountTotal < amountLD) {\\n            IERC20(token).safeTransfer(srcFrom, amountLD - amountTotal);\\n        }\\n\\n        emit HandleMessage(srcChainId, srcAddress, srcFrom, token, amountLD, keccak256(params));\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // FAILSAFE FUNCTIONS\\n    function retryMessage(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        address srcFrom,\\n        uint256 nonce,\\n        bytes calldata params\\n    ) external payable override {\\n        FailedMessage memory message = failedMessages[srcChainId][srcAddress][srcFrom][nonce];\\n        if (message.paramsHash == bytes32(0)) revert NoStoredMessage();\\n        if (keccak256(params) != message.paramsHash) revert InvalidPayload();\\n\\n        delete failedMessages[srcChainId][srcAddress][srcFrom][nonce];\\n\\n        _handleMessage(srcChainId, srcAddress, srcFrom, message.token, message.amountLD, params);\\n\\n        emit RetryMessageSuccess(\\n            srcChainId,\\n            srcAddress,\\n            srcFrom,\\n            nonce,\\n            message.token,\\n            message.amountLD,\\n            message.paramsHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x843790dd0063bf1dca6d061a63dc38120d479d2241bf3a461b13be3dab2bbb8c\",\"license\":\"MIT\"},\"contracts/interfaces/IOmniDisperse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOmniDisperse {\\n    error DstChainNotFound(uint16 chainId);\\n    error PoolNotFound(uint256 poolId);\\n    error Forbidden();\\n    error NoStoredMessage();\\n    error InvalidPayload();\\n\\n    event UpdateDstAddress(uint16 indexed dstChainId, address indexed dstAddress);\\n    event UpdateToken(uint256 indexed poolId, address indexed token);\\n    event SGReceive(\\n        uint16 indexed srcChainId,\\n        bytes indexed srcAddress,\\n        uint256 indexed nonce,\\n        address token,\\n        uint256 amountLD,\\n        bytes payload\\n    );\\n    event HandleMessage(\\n        uint16 indexed srcChainId,\\n        address indexed srcAddress,\\n        address indexed srcFrom,\\n        address token,\\n        uint256 amountLD,\\n        bytes32 paramsHash\\n    );\\n    event MessageFailed(\\n        uint16 indexed srcChainId,\\n        address indexed srcAddress,\\n        address indexed srcFrom,\\n        uint256 nonce,\\n        address token,\\n        uint256 amountLD,\\n        bytes params,\\n        bytes reason\\n    );\\n    event RetryMessageSuccess(\\n        uint16 indexed srcChainId,\\n        address indexed srcAddress,\\n        address indexed srcFrom,\\n        uint256 nonce,\\n        address token,\\n        uint256 amountLD,\\n        bytes32 paramsHash\\n    );\\n\\n    struct SwapParams {\\n        uint256 poolId;\\n        uint256 amount;\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        address[] dstRecipients;\\n        uint256[] dstAmounts;\\n        uint256 gas;\\n    }\\n\\n    struct FailedMessage {\\n        address token;\\n        uint256 amountLD;\\n        bytes32 paramsHash;\\n    }\\n\\n    function estimateFee(\\n        uint16 dstChainId,\\n        address[] memory dstRecipients,\\n        uint256[] memory dstAmounts,\\n        uint256 gas,\\n        address from\\n    ) external view returns (uint256);\\n\\n    function updateDstAddress(uint16 dstChainId, address _dstAddress) external;\\n\\n    function swap(SwapParams memory params) external payable;\\n\\n    function retryMessage(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        address srcFrom,\\n        uint256 nonce,\\n        bytes calldata params\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xc05a54946b638f4a67b9a65618040d25c7f09881cebcc3ec967cf3735370604d\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStargateFactory {\\n    function getPool(uint256 poolId) external view returns (address);\\n\\n    function allPools(uint256 index) external view returns (address);\\n\\n    function allPoolsLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x29447b67ae12e2954b47383d8101eb1826d2902f1c62c715755f9ac0c76395ae\",\"license\":\"MIT\"},\"contracts/interfaces/IStargatePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStargatePool {\\n    function poolId() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4d0d8f0773939f6636c11e30d5f620183bede767e267231fb69f2973e343bc26\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x94c6c2b54161f27ca5c45ea5d817a6dbe8ad3e4b052ba9c3da7346dfc39983ba\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStargateRouter {\\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\\n    event CachedSwapSaved(\\n        uint16 chainId,\\n        bytes srcAddress,\\n        uint256 nonce,\\n        address token,\\n        uint256 amountLD,\\n        address to,\\n        bytes payload,\\n        bytes reason\\n    );\\n    event RevertRedeemLocal(\\n        uint16 srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        bytes to,\\n        uint256 redeemAmountSD,\\n        uint256 mintAmountSD,\\n        uint256 indexed nonce,\\n        bytes indexed srcAddress\\n    );\\n    event RedeemLocalCallback(\\n        uint16 srcChainId,\\n        bytes indexed srcAddress,\\n        uint256 indexed nonce,\\n        uint256 srcPoolId,\\n        uint256 dstPoolId,\\n        address to,\\n        uint256 amountSD,\\n        uint256 mintAmountSD\\n    );\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function revertLookup(\\n        uint16 chainId,\\n        bytes calldata srcAddress,\\n        uint256 nonce\\n    ) external view returns (bytes memory);\\n\\n    function cachedSwapLookup(\\n        uint16 chainId,\\n        bytes calldata srcAddress,\\n        uint256 nonce\\n    )\\n        external\\n        view\\n        returns (\\n            address token,\\n            uint256 amountLD,\\n            address to,\\n            bytes calldata payload\\n        );\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function revertRedeemLocal(\\n        uint16 _dstChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce,\\n        address payable _refundAddress,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function retryRevert(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external payable;\\n\\n    function clearCachedSwap(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa7870e58b768496033192fb5ad3ab0f85c561ccf113548636931054796abc4d2\",\"license\":\"MIT\"},\"contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8355680ee3db8c855f77a0cb141eedb68e0894ddb2b7ffafdf78303f6dac23e0\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c080604052346200012757620000309062001c7880380380916200002582856200012c565b833981019062000166565b60008054336001600160a01b03198216811783556040519293602092849260049284926001600160a01b03929083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a3608081905263c45a015560e01b8352165afa9182156200011b5791620000e6575b5060a052604051611af0908162000188823960805181818161081e01528181610bab01528181610e0e0152611162015260a051818181610a1a015261109b0152f35b6200010c915060203d811162000113575b6200010381836200012c565b81019062000166565b38620000a4565b503d620000f7565b604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200015057604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126200012757516001600160a01b038116810362000127579056fe60806040526004361015610013575b600080fd5b60003560e01c8063452cdfc51461011757806348b6fbd01461010e578063556f2f1e14610105578063598f93bd146100fc578063715018a6146100f35780638da5cb5b146100ea5780638fbe3abc146100e1578063ab8236f3146100d8578063c45a0155146100cf578063e074ec32146100c6578063f2fde38b146100bd578063f6b49ba0146100b45763f887ea40146100ac57600080fd5b61000e610df7565b5061000e610d72565b5061000e610c49565b5061000e610a49565b5061000e610a03565b5061000e6107a9565b5061000e6105f0565b5061000e610599565b5061000e61053a565b5061000e610471565b5061000e6103b8565b5061000e61018f565b5061000e610140565b6004359061ffff8216820361000e57565b359061ffff8216820361000e57565b503461000e57602036600319011261000e5761ffff61015d610120565b166000526001602052602060018060a01b0360406000205416604051908152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e576101a9610120565b61ffff602435916101b98361017e565b6101c1610e3d565b16600081815260016020526040812080546001600160a01b0319166001600160a01b038516179055916001600160a01b0316907f2a00dad3333a840171ea0391ef1a1241e87753bd39154bffbeee262a59a4b09d8380a380f35b50634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161024557604052565b61024d61021b565b604052565b604081019081106001600160401b0382111761024557604052565b90601f801991011681019081106001600160401b0382111761024557604052565b6040519060e082018281106001600160401b0382111761024557604052565b60405190606082018281106001600160401b0382111761024557604052565b6020906001600160401b0381116102e5575b60051b0190565b6102ed61021b565b6102de565b81601f8201121561000e57803591610309836102cc565b92610317604051948561026d565b808452602092838086019260051b82010192831161000e578301905b828210610341575050505090565b838091833561034f8161017e565b815201910190610333565b81601f8201121561000e57803591610371836102cc565b9261037f604051948561026d565b808452602092838086019260051b82010192831161000e578301905b8282106103a9575050505090565b8135815290830190830161039b565b5060031960203682011261000e57600435906001600160401b039081831161000e5760e090833603011261000e576103ee61028e565b90826004013582526024830135602083015261040c60448401610131565b604083015260648301356060830152608483013581811161000e5761043790600436918601016102f2565b608083015260a483013590811161000e5761046f9261045e60c4926004369184010161035a565b60a0840152013560c0820152611036565b005b503461000e57608036600319011261000e576104e961048e610120565b6104d260243561049d8161017e565b61ffff604435936104ad8561017e565b16600052600260205260406000209060018060a01b0316600052602052604060002090565b9060018060a01b0316600052602052604060002090565b606435600090815260209182526040908190208054600182015460029092015483516001600160a01b0390921682529381019190915290810191909152606090f35b0390f35b600091031261000e57565b503461000e5760008060031936011261059657610555610e3d565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b9181601f8401121561000e578235916001600160401b03831161000e576020838186019501011161000e57565b5060a036600319011261000e57610605610120565b602435906106128261017e565b60443561061e8161017e565b606435906084356001600160401b03811161000e576106419036906004016105c3565b909161067e6106798561066a846104d28b6104d28c61ffff166000526002602052604060002090565b90600052602052604060002090565b611a03565b604081019384511561079757610695368583610d3b565b60208151910120855103610785577fcfe6b990e4af6de0aabfb19c1049389773265cb0e8bbb5fe4d7b7749f95c1a2d94610744610780936107378a61ffff9861070f6106fd8f61066a8f916104d28e916104d28961ffff166000526002602052604060002090565b60026000918281558260018201550155565b83518e908a906001600160a01b031691610731602088019a8b51953691610d3b565b946118c3565b516001600160a01b031690565b91519051604080519889526001600160a01b0393841660208a015288019190915260608701529182169690911694909116929081906080820190565b0390a4005b604051637c6953f960e01b8152600490fd5b604051632b96c98560e21b8152600490fd5b503461000e5760c036600319011261000e576107c3610120565b6001600160401b0360243581811161000e576107e39036906004016105c3565b929060443593606435926107f68461017e565b6084359460a43590811161000e576108129036906004016105c3565b6001600160a01b0394917f0000000000000000000000000000000000000000000000000000000000000000861633036109f157610910858489878d8d7f4798e9efbbc84d88c90c46f86d32ae4d8c033fe3a2021cd045cab33f7102164a9c8861089461088e61ffff9f610888906107809f611689565b906116b4565b60601c90565b956108ba6108b38d806108ad61088e6108888389611689565b95611697565b3691610d3b565b6108fa885a6108f48a6108e6868b898b6040519889966307b5a4dd60e51b6020890152602488016116e5565b03601f19810184528361026d565b30611a51565b91901561091f575b505050505050505050611769565b9760405195869516978561177e565b7f65bd85abdabd424fd557162c9a054b13d825065d5f7981fcab1921bb74462126956109e0936109ca8a6109958b61066a8f6104d28c916104d28b5160208d0120976109696102ad565b6001600160a01b038c168152988c60208b015260408a015261ffff166000526002602052604060002090565b815181546001600160a01b0319166001600160a01b039190911617815590600290604090602081015160018501550151910155565b61ffff87604051988998169c169a16988661172a565b0390a438878d8d83808f8180610902565b604051631dd2188d60e31b8152600490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e5760a036600319011261000e57610a63610120565b6001600160401b039060243582811161000e57610a849036906004016102f2565b9160443590811161000e57610a9d90369060040161035a565b608435610aa98161017e565b610ad1610ac48461ffff166000526001602052604060002090565b546001600160a01b031690565b936001600160a01b039182861615610c295791610b19610b67610b4a959361052b989560409788978851958691602083016014916001600160601b03199060601b1681520190565b0392610b2d601f199485810188528761026d565b610b3e895198899260208401610e95565b0383810188528761026d565b610b5b875196879260208401610f33565b0390810185528461026d565b610b6f6102ad565b95606435875260006020880152610b84610f5f565b85880152610ba7855197889586948594630a51236960e01b865260048601610fe2565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa918215610c1c575b600092610bec575b50519081529081906020820190565b81610c0d9293503d8411610c15575b610c05818361026d565b810190610f7d565b509038610bdd565b503d610bfb565b610c24611029565b610bd5565b6040516315fe4c1560e01b815261ffff86166004820152602490fd5b0390fd5b503461000e57602036600319011261000e57600435610c678161017e565b610c6f610e3d565b6001600160a01b039081168015610cbd57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6020906001600160401b038111610d2e575b601f01601f19160190565b610d3661021b565b610d23565b929192610d4782610d11565b91610d55604051938461026d565b82948184528183011161000e578281602093846000960137010152565b503461000e5760c036600319011261000e57610d8c610120565b60243590610d998261017e565b60443590610da68261017e565b606435610db28161017e565b60a4356001600160401b03811161000e573660238201121561000e57610de2903690602481600401359101610d3b565b923033036109f15761046f94608435936118c3565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6000546001600160a01b03163303610e5157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190604081528251809252606081019160208094019060005b818110610ef3575050508281830391015281808451928381520193019160005b828110610edf575050505090565b835185529381019392810192600101610ed1565b82516001600160a01b031685529385019391850191600101610eb1565b60005b838110610f235750506000910152565b8181015183820152602001610f13565b601492916001600160601b03199060601b168152610f5a8251809360208685019101610f10565b010190565b60405190610f6c82610252565b6002825261060f60f31b6020830152565b919082604091031261000e576020825192015190565b90602091610fac81518092818552858086019101610f10565b601f01601f1916010190565b9060606040610fdf9380518452602081015160208501520151918160408201520190610f93565b90565b9261100d610fdf959361ffff61101b941686526001602087015260a0604087015260a0860190610f93565b908482036060860152610f93565b916080818403910152610fb8565b506040513d6000823e3d90fd5b60409081810192611063610ac461104f865161ffff1690565b61ffff166000526001602052604060002090565b6001600160a01b039490929085841615611372578151855163068bcd8d60e01b815260048101919091526020929190879084816024817f000000000000000000000000000000000000000000000000000000000000000086165afa908115611365575b600091611348575b501696871561132d57836004988851998a8092637e062a3560e11b82525afa978815611320575b6000986112f1575b50600095865b60a08501518051891015611130576001916111218a611128936113b8565b51906113f9565b970196611103565b50965091939690929497836111bf91169388870194611152865130338461148e565b8551845163095ea7b360e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381166004830152602482019290925290918b90829060449082906000905af180156112e4575b6112b7575b5016945161ffff1690565b94611213815193611256606084015196519a60c0850151926111df6102ad565b9384526000828501526111f0610f5f565b8785015286519485918383016014916001600160601b03199060601b1681520190565b0390611227601f199283810187528661026d565b61124560a0608088015197015196610b3e8951988992858401610e95565b610b5b875196879233908401610f33565b863b1561000e5760009861128194519a8b998a9889986327efc43f60e21b8a52339260048b01611426565b039134905af180156112aa575b6112955750565b806112a26112a892610232565b8061052f565b565b6112b2611029565b61128e565b6112d6908b3d8d116112dd575b6112ce818361026d565b81019061140e565b50386111b4565b503d6112c4565b6112ec611029565b6111af565b611312919850843d8611611319575b61130a818361026d565b8101906113a3565b96386110fd565b503d611300565b611328611029565b6110f5565b825187516302ad881560e41b81526004810191909152602490fd5b61135f9150853d87116113195761130a818361026d565b386110ce565b61136d611029565b6110c6565b84611382610c45925161ffff1690565b90516315fe4c1560e01b815261ffff90911660048201529081906024820190565b9081602091031261000e5751610fdf8161017e565b80518210156113cc5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b50634e487b7160e01b600052601160045260246000fd5b9190820180921161140657565b6112a86113e2565b9081602091031261000e5751801515810361000e5790565b97949093610fdf99979361147f979361ffff61147197168b5260208b015260408a015260018060a01b03166060890152608088015260a08701526101208060c0880152860190610fb8565b9084820360e0860152610f93565b91610100818403910152610f93565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526112a89160a082018281106001600160401b038211176114e6575b6040526114f3565b6114ee61021b565b6114de565b604051611570916001600160a01b031661150c82610252565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d156115ec573d9161155483610d11565b92611562604051948561026d565b83523d60008785013e6115f0565b8051908161157d57505050565b828061158d93830101910161140e565b156115955750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b919290156116525750815115611604575090565b3b1561160d5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156116655750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c45906024830190610f93565b9060141161000e5790601490565b909291928360141161000e57831161000e57601401916013190190565b6bffffffffffffffffffffffff1990358181169392601481106116d657505050565b60140360031b82901b16169150565b61ffff90911681526001600160a01b03918216602082015291811660408301529091166060820152608081019190915260c060a08201819052610fdf92910190610f93565b93909261175b92610fdf9694865260018060a01b03166020860152604085015260a0606085015260a0840190610f93565b916080818403910152610f93565b81604051928392833781016000815203902090565b9284926080959260018060a01b03168552602085015260606040850152816060850152848401376000828201840152601f01601f1916010190565b81601f8201121561000e578051916117d0836102cc565b926117de604051948561026d565b808452602092838086019260051b82010192831161000e578301905b828210611808575050505090565b815181529083019083016117fa565b91909160408184031261000e578051926001600160401b039384811161000e5782019381601f8601121561000e578451611850816102cc565b9061185e604051928361026d565b808252602096878084019260051b8201019185831161000e5788809201905b83821061189d57505050509483015190811161000e57610fdf92016117b9565b82809183516118ab8161017e565b81520191019061187d565b9190820391821161140657565b95908551966118da60208089019989010189611817565b9490966000998a5b89518c101561192b576119238c60019261191e8d8d6119116107378f87611908916113b8565b519687946113b8565b90878060a01b03166119c5565b6113f9565b9b019a6118e2565b61ffff969b5061199d9499507ff054e53463d5a0a197186fcded2dd1cc741eef0502a71c18695d26de2af3da0397509990919294998381106119a2575b50519020604080516001600160a01b039889168152602081019390935282015291851696909416949091169281906060820190565b0390a4565b6119af6119bf91856118b6565b866001600160a01b038b166119c5565b38611968565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526112a8916119fe82606481016108e6565b6114f3565b90604051606081018181106001600160401b03821117611a44575b60405260406002829460018060a01b038154168452600181015460208501520154910152565b611a4c61021b565b611a1e565b909291600080916040519560c087018781106001600160401b03821117611aad575b6040526096875282602088019560a036883760208451940192f1903d9060968211611aa4575b6000908286523e9190565b60969150611a99565b611ab561021b565b611a7356fea264697066735822122039298c3c492bf3e00cedf7c91eb0253b13dc98c1747e754a3a5d95e5d5f1ea4a64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063452cdfc51461011757806348b6fbd01461010e578063556f2f1e14610105578063598f93bd146100fc578063715018a6146100f35780638da5cb5b146100ea5780638fbe3abc146100e1578063ab8236f3146100d8578063c45a0155146100cf578063e074ec32146100c6578063f2fde38b146100bd578063f6b49ba0146100b45763f887ea40146100ac57600080fd5b61000e610df7565b5061000e610d72565b5061000e610c49565b5061000e610a49565b5061000e610a03565b5061000e6107a9565b5061000e6105f0565b5061000e610599565b5061000e61053a565b5061000e610471565b5061000e6103b8565b5061000e61018f565b5061000e610140565b6004359061ffff8216820361000e57565b359061ffff8216820361000e57565b503461000e57602036600319011261000e5761ffff61015d610120565b166000526001602052602060018060a01b0360406000205416604051908152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e576101a9610120565b61ffff602435916101b98361017e565b6101c1610e3d565b16600081815260016020526040812080546001600160a01b0319166001600160a01b038516179055916001600160a01b0316907f2a00dad3333a840171ea0391ef1a1241e87753bd39154bffbeee262a59a4b09d8380a380f35b50634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161024557604052565b61024d61021b565b604052565b604081019081106001600160401b0382111761024557604052565b90601f801991011681019081106001600160401b0382111761024557604052565b6040519060e082018281106001600160401b0382111761024557604052565b60405190606082018281106001600160401b0382111761024557604052565b6020906001600160401b0381116102e5575b60051b0190565b6102ed61021b565b6102de565b81601f8201121561000e57803591610309836102cc565b92610317604051948561026d565b808452602092838086019260051b82010192831161000e578301905b828210610341575050505090565b838091833561034f8161017e565b815201910190610333565b81601f8201121561000e57803591610371836102cc565b9261037f604051948561026d565b808452602092838086019260051b82010192831161000e578301905b8282106103a9575050505090565b8135815290830190830161039b565b5060031960203682011261000e57600435906001600160401b039081831161000e5760e090833603011261000e576103ee61028e565b90826004013582526024830135602083015261040c60448401610131565b604083015260648301356060830152608483013581811161000e5761043790600436918601016102f2565b608083015260a483013590811161000e5761046f9261045e60c4926004369184010161035a565b60a0840152013560c0820152611036565b005b503461000e57608036600319011261000e576104e961048e610120565b6104d260243561049d8161017e565b61ffff604435936104ad8561017e565b16600052600260205260406000209060018060a01b0316600052602052604060002090565b9060018060a01b0316600052602052604060002090565b606435600090815260209182526040908190208054600182015460029092015483516001600160a01b0390921682529381019190915290810191909152606090f35b0390f35b600091031261000e57565b503461000e5760008060031936011261059657610555610e3d565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b9181601f8401121561000e578235916001600160401b03831161000e576020838186019501011161000e57565b5060a036600319011261000e57610605610120565b602435906106128261017e565b60443561061e8161017e565b606435906084356001600160401b03811161000e576106419036906004016105c3565b909161067e6106798561066a846104d28b6104d28c61ffff166000526002602052604060002090565b90600052602052604060002090565b611a03565b604081019384511561079757610695368583610d3b565b60208151910120855103610785577fcfe6b990e4af6de0aabfb19c1049389773265cb0e8bbb5fe4d7b7749f95c1a2d94610744610780936107378a61ffff9861070f6106fd8f61066a8f916104d28e916104d28961ffff166000526002602052604060002090565b60026000918281558260018201550155565b83518e908a906001600160a01b031691610731602088019a8b51953691610d3b565b946118c3565b516001600160a01b031690565b91519051604080519889526001600160a01b0393841660208a015288019190915260608701529182169690911694909116929081906080820190565b0390a4005b604051637c6953f960e01b8152600490fd5b604051632b96c98560e21b8152600490fd5b503461000e5760c036600319011261000e576107c3610120565b6001600160401b0360243581811161000e576107e39036906004016105c3565b929060443593606435926107f68461017e565b6084359460a43590811161000e576108129036906004016105c3565b6001600160a01b0394917f0000000000000000000000000000000000000000000000000000000000000000861633036109f157610910858489878d8d7f4798e9efbbc84d88c90c46f86d32ae4d8c033fe3a2021cd045cab33f7102164a9c8861089461088e61ffff9f610888906107809f611689565b906116b4565b60601c90565b956108ba6108b38d806108ad61088e6108888389611689565b95611697565b3691610d3b565b6108fa885a6108f48a6108e6868b898b6040519889966307b5a4dd60e51b6020890152602488016116e5565b03601f19810184528361026d565b30611a51565b91901561091f575b505050505050505050611769565b9760405195869516978561177e565b7f65bd85abdabd424fd557162c9a054b13d825065d5f7981fcab1921bb74462126956109e0936109ca8a6109958b61066a8f6104d28c916104d28b5160208d0120976109696102ad565b6001600160a01b038c168152988c60208b015260408a015261ffff166000526002602052604060002090565b815181546001600160a01b0319166001600160a01b039190911617815590600290604090602081015160018501550151910155565b61ffff87604051988998169c169a16988661172a565b0390a438878d8d83808f8180610902565b604051631dd2188d60e31b8152600490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e5760a036600319011261000e57610a63610120565b6001600160401b039060243582811161000e57610a849036906004016102f2565b9160443590811161000e57610a9d90369060040161035a565b608435610aa98161017e565b610ad1610ac48461ffff166000526001602052604060002090565b546001600160a01b031690565b936001600160a01b039182861615610c295791610b19610b67610b4a959361052b989560409788978851958691602083016014916001600160601b03199060601b1681520190565b0392610b2d601f199485810188528761026d565b610b3e895198899260208401610e95565b0383810188528761026d565b610b5b875196879260208401610f33565b0390810185528461026d565b610b6f6102ad565b95606435875260006020880152610b84610f5f565b85880152610ba7855197889586948594630a51236960e01b865260048601610fe2565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa918215610c1c575b600092610bec575b50519081529081906020820190565b81610c0d9293503d8411610c15575b610c05818361026d565b810190610f7d565b509038610bdd565b503d610bfb565b610c24611029565b610bd5565b6040516315fe4c1560e01b815261ffff86166004820152602490fd5b0390fd5b503461000e57602036600319011261000e57600435610c678161017e565b610c6f610e3d565b6001600160a01b039081168015610cbd57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6020906001600160401b038111610d2e575b601f01601f19160190565b610d3661021b565b610d23565b929192610d4782610d11565b91610d55604051938461026d565b82948184528183011161000e578281602093846000960137010152565b503461000e5760c036600319011261000e57610d8c610120565b60243590610d998261017e565b60443590610da68261017e565b606435610db28161017e565b60a4356001600160401b03811161000e573660238201121561000e57610de2903690602481600401359101610d3b565b923033036109f15761046f94608435936118c3565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6000546001600160a01b03163303610e5157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190604081528251809252606081019160208094019060005b818110610ef3575050508281830391015281808451928381520193019160005b828110610edf575050505090565b835185529381019392810192600101610ed1565b82516001600160a01b031685529385019391850191600101610eb1565b60005b838110610f235750506000910152565b8181015183820152602001610f13565b601492916001600160601b03199060601b168152610f5a8251809360208685019101610f10565b010190565b60405190610f6c82610252565b6002825261060f60f31b6020830152565b919082604091031261000e576020825192015190565b90602091610fac81518092818552858086019101610f10565b601f01601f1916010190565b9060606040610fdf9380518452602081015160208501520151918160408201520190610f93565b90565b9261100d610fdf959361ffff61101b941686526001602087015260a0604087015260a0860190610f93565b908482036060860152610f93565b916080818403910152610fb8565b506040513d6000823e3d90fd5b60409081810192611063610ac461104f865161ffff1690565b61ffff166000526001602052604060002090565b6001600160a01b039490929085841615611372578151855163068bcd8d60e01b815260048101919091526020929190879084816024817f000000000000000000000000000000000000000000000000000000000000000086165afa908115611365575b600091611348575b501696871561132d57836004988851998a8092637e062a3560e11b82525afa978815611320575b6000986112f1575b50600095865b60a08501518051891015611130576001916111218a611128936113b8565b51906113f9565b970196611103565b50965091939690929497836111bf91169388870194611152865130338461148e565b8551845163095ea7b360e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381166004830152602482019290925290918b90829060449082906000905af180156112e4575b6112b7575b5016945161ffff1690565b94611213815193611256606084015196519a60c0850151926111df6102ad565b9384526000828501526111f0610f5f565b8785015286519485918383016014916001600160601b03199060601b1681520190565b0390611227601f199283810187528661026d565b61124560a0608088015197015196610b3e8951988992858401610e95565b610b5b875196879233908401610f33565b863b1561000e5760009861128194519a8b998a9889986327efc43f60e21b8a52339260048b01611426565b039134905af180156112aa575b6112955750565b806112a26112a892610232565b8061052f565b565b6112b2611029565b61128e565b6112d6908b3d8d116112dd575b6112ce818361026d565b81019061140e565b50386111b4565b503d6112c4565b6112ec611029565b6111af565b611312919850843d8611611319575b61130a818361026d565b8101906113a3565b96386110fd565b503d611300565b611328611029565b6110f5565b825187516302ad881560e41b81526004810191909152602490fd5b61135f9150853d87116113195761130a818361026d565b386110ce565b61136d611029565b6110c6565b84611382610c45925161ffff1690565b90516315fe4c1560e01b815261ffff90911660048201529081906024820190565b9081602091031261000e5751610fdf8161017e565b80518210156113cc5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b50634e487b7160e01b600052601160045260246000fd5b9190820180921161140657565b6112a86113e2565b9081602091031261000e5751801515810361000e5790565b97949093610fdf99979361147f979361ffff61147197168b5260208b015260408a015260018060a01b03166060890152608088015260a08701526101208060c0880152860190610fb8565b9084820360e0860152610f93565b91610100818403910152610f93565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526112a89160a082018281106001600160401b038211176114e6575b6040526114f3565b6114ee61021b565b6114de565b604051611570916001600160a01b031661150c82610252565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d156115ec573d9161155483610d11565b92611562604051948561026d565b83523d60008785013e6115f0565b8051908161157d57505050565b828061158d93830101910161140e565b156115955750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b919290156116525750815115611604575090565b3b1561160d5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156116655750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c45906024830190610f93565b9060141161000e5790601490565b909291928360141161000e57831161000e57601401916013190190565b6bffffffffffffffffffffffff1990358181169392601481106116d657505050565b60140360031b82901b16169150565b61ffff90911681526001600160a01b03918216602082015291811660408301529091166060820152608081019190915260c060a08201819052610fdf92910190610f93565b93909261175b92610fdf9694865260018060a01b03166020860152604085015260a0606085015260a0840190610f93565b916080818403910152610f93565b81604051928392833781016000815203902090565b9284926080959260018060a01b03168552602085015260606040850152816060850152848401376000828201840152601f01601f1916010190565b81601f8201121561000e578051916117d0836102cc565b926117de604051948561026d565b808452602092838086019260051b82010192831161000e578301905b828210611808575050505090565b815181529083019083016117fa565b91909160408184031261000e578051926001600160401b039384811161000e5782019381601f8601121561000e578451611850816102cc565b9061185e604051928361026d565b808252602096878084019260051b8201019185831161000e5788809201905b83821061189d57505050509483015190811161000e57610fdf92016117b9565b82809183516118ab8161017e565b81520191019061187d565b9190820391821161140657565b95908551966118da60208089019989010189611817565b9490966000998a5b89518c101561192b576119238c60019261191e8d8d6119116107378f87611908916113b8565b519687946113b8565b90878060a01b03166119c5565b6113f9565b9b019a6118e2565b61ffff969b5061199d9499507ff054e53463d5a0a197186fcded2dd1cc741eef0502a71c18695d26de2af3da0397509990919294998381106119a2575b50519020604080516001600160a01b039889168152602081019390935282015291851696909416949091169281906060820190565b0390a4565b6119af6119bf91856118b6565b866001600160a01b038b166119c5565b38611968565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526112a8916119fe82606481016108e6565b6114f3565b90604051606081018181106001600160401b03821117611a44575b60405260406002829460018060a01b038154168452600181015460208501520154910152565b611a4c61021b565b611a1e565b909291600080916040519560c087018781106001600160401b03821117611aad575b6040526096875282602088019560a036883760208451940192f1903d9060968211611aa4575b6000908286523e9190565b60969150611a99565b611ab561021b565b611a7356fea264697066735822122039298c3c492bf3e00cedf7c91eb0253b13dc98c1747e754a3a5d95e5d5f1ea4a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OmniDisperse.sol:OmniDisperse",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1962,
        "contract": "contracts/OmniDisperse.sol:OmniDisperse",
        "label": "dstAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 1973,
        "contract": "contracts/OmniDisperse.sol:OmniDisperse",
        "label": "failedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(FailedMessage)2947_storage))))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(FailedMessage)2947_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => struct IOmniDisperse.FailedMessage)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(FailedMessage)2947_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(FailedMessage)2947_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IOmniDisperse.FailedMessage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(FailedMessage)2947_storage)"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(FailedMessage)2947_storage))))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => mapping(address => mapping(uint256 => struct IOmniDisperse.FailedMessage))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(FailedMessage)2947_storage)))"
      },
      "t_mapping(t_uint256,t_struct(FailedMessage)2947_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOmniDisperse.FailedMessage)",
        "numberOfBytes": "32",
        "value": "t_struct(FailedMessage)2947_storage"
      },
      "t_struct(FailedMessage)2947_storage": {
        "encoding": "inplace",
        "label": "struct IOmniDisperse.FailedMessage",
        "members": [
          {
            "astId": 2942,
            "contract": "contracts/OmniDisperse.sol:OmniDisperse",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2944,
            "contract": "contracts/OmniDisperse.sol:OmniDisperse",
            "label": "amountLD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2946,
            "contract": "contracts/OmniDisperse.sol:OmniDisperse",
            "label": "paramsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}